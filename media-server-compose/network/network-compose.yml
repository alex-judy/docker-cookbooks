version: "3.7"
services:
########## Network Stack ##########

## Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy:latest
    restart: always
    privileged: true
    networks:
      - socket_proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      - EVENTS=1
      - PING=1
      - VERSION=1
      - AUTH=0
      - SECRETS=0
      - POST=1 # Needed for Ouroboros
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 #
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1
      - INFO=1
      - NETWORKS=1 #
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 #
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 #
      - VOLUMES=1

  ## PIA - VPN Container
  # pia:
  #   container_name: pia
  #   image: act28/pia-openvpn-proxy:latest
  #   restart: always
  #   cap_add:
  #     - NET_ADMIN
  #   devices:
  #     - /dev/net/tun
  #   dns:
  #     - 209.222.18.218
  #     - 209.222.18.222
  #   networks:
  #     traefik_proxy:
  #       ipv4_address: 192.168.50.238
  #   security_opt:
  #     - no-new-privileges:true
  #   volumes:
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   environment:
  #     - REGION=us_east
  #     - USERNAME=$PIA_USER
  #     - PASSWORD=$PIA_PASS
  #     - LOCAL_NETWORK=192.168.1.0/24
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.rutorrent-rtr.entrypoints=https"
  #     - "traefik.http.routers.rutorrent-rtr.rule=Host(`rutorrent.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.rutorrent-rtr.middlewares=chain-oauth@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.rutorrent-rtr.service=rutorrent-svc"
  #     - "traefik.http.services.rutorrent-svc.loadbalancer.server.port=80"

## Traefik - Reverse Proxy
  traefik:
    container_name: traefik
    image: traefik:picodon # the picodon tag refers to v2.3.x
    restart: always
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entrypoints.http.http.redirections.entryPoint.to=https # entrypoints.<your_entrypoint_name>.http.redirections...
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      # - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      #      - --entrypoints.https.http.middlewares=chain-oauth@file
      - --entrypoints.https.http.tls.certresolver=cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME
      # - --entrypoints.https.http.tls.domains[1].main=$DOMAIN # Pulls main cert for second domain
      # - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAIN # Pulls wildcard cert for second domain
      - --entryPoints.traefik.address=:8080
      - --entryPoints.wireguard.address=:51820/udp
      - --api=true
      #      - --api.insecure=true
      #      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=tcp://socket-proxy:2375 # My docker-socket-proxy
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=traefik_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      #      - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=$DNS_RESOLVER # pihole IP
      - --pilot.token=cd7f685d-7923-4ea4-82ed-103b8cea6d2a
    networks:
      traefik_proxy:
        ipv4_address: 192.168.50.254
      socket_proxy:
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 51820 # wireguard
        published: 51820
        protocol: udp
        mode: host
    security_opt:
      - no-new-privileges:true # https://docs.docker.com/engine/reference/run/#security-configuration
    volumes:
      - $DOCKERDIR/traefik/rules:/rules # file provider directory
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Connect to docker-socket-proxy tcp://docker-socket-proxy:2375
      - $DOCKERDIR/traefik/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - /var/log/docker/traefik.log:/traefik.log # for fail2ban - make sure to touch file before starting container
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    #      - CF_API_EMAIL_FILE=/run/secrets/cf-api-email
    #      - CF_API_KEY_FILE=/run/secrets/cf-api-key
    # secrets:
    #   - "cf-api-email"
    #   - "cf-api-key"
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.priority=10"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## API Forward Auth Bypass # Used for willfantom/SUI - automatic traefik dashboard
      - "traefik.http.routers.traefik-bypass.entrypoints=https"
      - "traefik.http.routers.traefik-bypass.rule=Host(`traefik.$DOMAINNAME`) && PathPrefix(`/api/`)"
      # - "traefik.http.middlewares.traefik-basicauth.basicauth.users=$MY_USERNAME:$TRAEFIK_PASSWORD" # password must be htpasswd hash
      - "traefik.http.routers.traefik-bypass.priority=20"
      - "traefik.http.routers.traefik-bypass.service=api@internal"

## Cloudflare-Companion - Automatic CNAME DNS Creation
  cf-companion:
    container_name: cf-companion
    image: tiredofit/traefik-cloudflare-companion:latest
    restart: always
    depends_on:
      - socket-proxy
    networks:
      socket_proxy:
    security_opt:
      - no-new-privileges:true
    environment:
      - TIMEZONE=$TZ
      - TRAEFIK_VERSION=2
      - CF_EMAIL=$CLOUDFLARE_EMAIL # Same as traefik
      - CF_TOKEN=$CLOUDFLARE_API_KEY # Same as traefik
      - TARGET_DOMAIN=$DOMAINNAME
      - DOMAIN1=$DOMAINNAME
      - DOMAIN1_ZONE_ID=$CLOUDFLARE_COMPANION_ZONE_ID # Copy from Cloudflare Overview page
      - DOMAIN1_PROXIED=TRUE
      - DOCKER_HOST=tcp://socket-proxy:2375
      # - DOMAIN2=$DOMAIN
      # - DOMAIN2_ZONE_ID=$ZONE_ID_2 # Copy from Cloudflare Overview page
      # - DOMAIN2_PROXIED=TRUE

## Cloudflare DDNS - Dynamic DNS Updater
  cf-ddns:
    container_name: cf-ddns
    image: oznu/cloudflare-ddns:latest
    restart: always
    environment:
      - API_KEY=$CLOUDFLARE_DDNS_API_TOKEN
      - ZONE=$DOMAINNAME
      - PROXIED=true
      - RRTYPE=A
      - DELETE_ON_STOP=false
      - DNS_SERVER=1.1.1.1

networks:
  traefik_proxy:
    external: true
  socket_proxy:
    external: true